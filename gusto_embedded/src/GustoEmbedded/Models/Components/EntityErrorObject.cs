//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace GustoEmbedded.Models.Components
{
    using GustoEmbedded.Models.Components;
    using GustoEmbedded.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    public class EntityErrorObject
    {

        /// <summary>
        /// Specifies where the error occurs. Typically this key identifies the attribute/parameter related to the error.
        /// </summary>
        [JsonProperty("error_key")]
        public string ErrorKey { get; set; } = default!;

        /// <summary>
        /// Specifies the type of error. The category provides error groupings and can be used to build custom error handling in your integration. If category is `nested_errors`, the object will contain a nested `errors` property with entity errors.
        /// </summary>
        [JsonProperty("category")]
        public string Category { get; set; } = default!;

        /// <summary>
        /// Provides details about the error - generally this message can be surfaced to an end user.
        /// </summary>
        [JsonProperty("message")]
        public string? Message { get; set; }

        /// <summary>
        /// Contains relevant data to identify the resource in question when applicable. For example, to identify an entity `entity_type` and `entity_uuid` will be provided.
        /// </summary>
        [JsonProperty("metadata")]
        public Models.Components.Metadata? Metadata { get; set; }

        /// <summary>
        /// Will only exist if category is `nested_errors`. It is possible to have multiple levels of nested errors.
        /// </summary>
        [JsonProperty("errors")]
        public List<EntityErrorObject>? Errors { get; set; }
    }
}