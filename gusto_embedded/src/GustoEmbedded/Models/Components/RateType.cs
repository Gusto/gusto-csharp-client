//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace GustoEmbedded.Models.Components
{
    using GustoEmbedded.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// [for `workers_compensation_rate`] The type of rate being collected. Either:<br/>
    /// 
    /// <remarks>
    ///  - `percent`: A percentage formatted as a decimal, e.g. `0.01` for 1%<br/>
    ///  - `currency_per_hour`: A dollar amount per hour, e.g. `3.24` for $3.24/hr<br/>
    /// 
    /// </remarks>
    /// </summary>
    public enum RateType
    {
        [JsonProperty("percent")]
        Percent,
        [JsonProperty("currency_per_hour")]
        CurrencyPerHour,
    }

    public static class RateTypeExtension
    {
        public static string Value(this RateType value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static RateType ToEnum(this string value)
        {
            foreach(var field in typeof(RateType).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is RateType)
                    {
                        return (RateType)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum RateType");
        }
    }

}