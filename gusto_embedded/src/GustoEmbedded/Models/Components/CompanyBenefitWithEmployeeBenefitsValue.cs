//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace GustoEmbedded.Models.Components
{
    using GustoEmbedded.Models.Components;
    using GustoEmbedded.Utils;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    

    public class CompanyBenefitWithEmployeeBenefitsValueType
    {
        private CompanyBenefitWithEmployeeBenefitsValueType(string value) { Value = value; }

        public string Value { get; private set; }
        public static CompanyBenefitWithEmployeeBenefitsValueType Str { get { return new CompanyBenefitWithEmployeeBenefitsValueType("str"); } }
        
        public static CompanyBenefitWithEmployeeBenefitsValueType CompanyBenefitWithEmployeeBenefitsValue2 { get { return new CompanyBenefitWithEmployeeBenefitsValueType("Company-Benefit-With-Employee-Benefits_value_2"); } }
        
        public static CompanyBenefitWithEmployeeBenefitsValueType Null { get { return new CompanyBenefitWithEmployeeBenefitsValueType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(CompanyBenefitWithEmployeeBenefitsValueType v) { return v.Value; }
        public static CompanyBenefitWithEmployeeBenefitsValueType FromString(string v) {
            switch(v) {
                case "str": return Str;
                case "Company-Benefit-With-Employee-Benefits_value_2": return CompanyBenefitWithEmployeeBenefitsValue2;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for CompanyBenefitWithEmployeeBenefitsValueType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((CompanyBenefitWithEmployeeBenefitsValueType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    /// <summary>
    /// For the `amount` and `percentage` contribution types, the value of the corresponding amount or percentage.<br/>
    /// 
    /// <remarks>
    /// <br/>
    /// For the `tiered` contribution type, an array of tiers.
    /// </remarks>
    /// </summary>
    [JsonConverter(typeof(CompanyBenefitWithEmployeeBenefitsValue.CompanyBenefitWithEmployeeBenefitsValueConverter))]
    public class CompanyBenefitWithEmployeeBenefitsValue {
        public CompanyBenefitWithEmployeeBenefitsValue(CompanyBenefitWithEmployeeBenefitsValueType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public string? Str { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public CompanyBenefitWithEmployeeBenefitsValue2? CompanyBenefitWithEmployeeBenefitsValue2 { get; set; }

        public CompanyBenefitWithEmployeeBenefitsValueType Type { get; set; }


        public static CompanyBenefitWithEmployeeBenefitsValue CreateStr(string str) {
            CompanyBenefitWithEmployeeBenefitsValueType typ = CompanyBenefitWithEmployeeBenefitsValueType.Str;

            CompanyBenefitWithEmployeeBenefitsValue res = new CompanyBenefitWithEmployeeBenefitsValue(typ);
            res.Str = str;
            return res;
        }

        public static CompanyBenefitWithEmployeeBenefitsValue CreateCompanyBenefitWithEmployeeBenefitsValue2(CompanyBenefitWithEmployeeBenefitsValue2 companyBenefitWithEmployeeBenefitsValue2) {
            CompanyBenefitWithEmployeeBenefitsValueType typ = CompanyBenefitWithEmployeeBenefitsValueType.CompanyBenefitWithEmployeeBenefitsValue2;

            CompanyBenefitWithEmployeeBenefitsValue res = new CompanyBenefitWithEmployeeBenefitsValue(typ);
            res.CompanyBenefitWithEmployeeBenefitsValue2 = companyBenefitWithEmployeeBenefitsValue2;
            return res;
        }

        public static CompanyBenefitWithEmployeeBenefitsValue CreateNull() {
            CompanyBenefitWithEmployeeBenefitsValueType typ = CompanyBenefitWithEmployeeBenefitsValueType.Null;
            return new CompanyBenefitWithEmployeeBenefitsValue(typ);
        }

        public class CompanyBenefitWithEmployeeBenefitsValueConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(CompanyBenefitWithEmployeeBenefitsValue);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                var json = JRaw.Create(reader).ToString();
                if (json == "null")
                {
                    return null;
                }

                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new CompanyBenefitWithEmployeeBenefitsValue(CompanyBenefitWithEmployeeBenefitsValueType.CompanyBenefitWithEmployeeBenefitsValue2)
                    {
                        CompanyBenefitWithEmployeeBenefitsValue2 = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<CompanyBenefitWithEmployeeBenefitsValue2>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(CompanyBenefitWithEmployeeBenefitsValue2), new CompanyBenefitWithEmployeeBenefitsValue(CompanyBenefitWithEmployeeBenefitsValueType.CompanyBenefitWithEmployeeBenefitsValue2), "CompanyBenefitWithEmployeeBenefitsValue2"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (json[0] == '"' && json[^1] == '"'){
                    return new CompanyBenefitWithEmployeeBenefitsValue(CompanyBenefitWithEmployeeBenefitsValueType.Str)
                    {
                        Str = json[1..^1]
                    };
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                CompanyBenefitWithEmployeeBenefitsValue res = (CompanyBenefitWithEmployeeBenefitsValue)value;
                if (CompanyBenefitWithEmployeeBenefitsValueType.FromString(res.Type).Equals(CompanyBenefitWithEmployeeBenefitsValueType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.Str != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Str));
                    return;
                }
                if (res.CompanyBenefitWithEmployeeBenefitsValue2 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.CompanyBenefitWithEmployeeBenefitsValue2));
                    return;
                }

            }

        }

    }
}