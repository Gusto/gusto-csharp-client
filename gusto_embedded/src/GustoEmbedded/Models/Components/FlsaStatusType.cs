//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace GustoEmbedded.Models.Components
{
    using GustoEmbedded.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// The FLSA status for this compensation. Salaried (&apos;Exempt&apos;) employees are paid a fixed salary every pay period. Salaried with overtime (&apos;Salaried Nonexempt&apos;) employees are paid a fixed salary every pay period, and receive overtime pay when applicable. Hourly (&apos;Nonexempt&apos;) employees are paid for the hours they work, and receive overtime pay when applicable. Commissioned employees (&apos;Commission Only Exempt&apos;) earn wages based only on commission. Commissioned with overtime (&apos;Commission Only Nonexempt&apos;) earn wages based on commission, and receive overtime pay when applicable. Owners (&apos;Owner&apos;) are employees that own at least twenty percent of the company. 
    /// </summary>
    public enum FlsaStatusType
    {
        [JsonProperty("Exempt")]
        Exempt,
        [JsonProperty("Salaried Nonexempt")]
        SalariedNonexempt,
        [JsonProperty("Nonexempt")]
        Nonexempt,
        [JsonProperty("Owner")]
        Owner,
        [JsonProperty("Commission Only Exempt")]
        CommissionOnlyExempt,
        [JsonProperty("Commission Only Nonexempt")]
        CommissionOnlyNonexempt,
    }

    public static class FlsaStatusTypeExtension
    {
        public static string Value(this FlsaStatusType value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static FlsaStatusType ToEnum(this string value)
        {
            foreach(var field in typeof(FlsaStatusType).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is FlsaStatusType)
                    {
                        return (FlsaStatusType)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum FlsaStatusType");
        }
    }

}