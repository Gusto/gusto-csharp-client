//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace GustoEmbedded.Models.Components
{
    using GustoEmbedded.Utils;
    using Newtonsoft.Json;
    using System;
    
    public enum Requirements
    {
        [JsonProperty("add_addresses")]
        AddAddresses,
        [JsonProperty("federal_tax_setup")]
        FederalTaxSetup,
        [JsonProperty("select_industry")]
        SelectIndustry,
        [JsonProperty("add_bank_info")]
        AddBankInfo,
        [JsonProperty("add_employees")]
        AddEmployees,
        [JsonProperty("state_setup")]
        StateSetup,
        [JsonProperty("payroll_schedule")]
        PayrollSchedule,
        [JsonProperty("sign_all_forms")]
        SignAllForms,
        [JsonProperty("verify_bank_info")]
        VerifyBankInfo,
        [JsonProperty("external_payroll")]
        ExternalPayroll,
    }

    public static class RequirementsExtension
    {
        public static string Value(this Requirements value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static Requirements ToEnum(this string value)
        {
            foreach(var field in typeof(Requirements).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is Requirements)
                    {
                        return (Requirements)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum Requirements");
        }
    }

}