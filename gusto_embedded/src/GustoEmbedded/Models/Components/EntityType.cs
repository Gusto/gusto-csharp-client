//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace GustoEmbedded.Models.Components
{
    using GustoEmbedded.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// The tax payer type of the company.
    /// </summary>
    public enum EntityType
    {
        [JsonProperty("C-Corporation")]
        CCorporation,
        [JsonProperty("S-Corporation")]
        SCorporation,
        [JsonProperty("Sole proprietor")]
        SoleProprietor,
        [JsonProperty("LLC")]
        Llc,
        [JsonProperty("LLP")]
        Llp,
        [JsonProperty("Limited partnership")]
        LimitedPartnership,
        [JsonProperty("Co-ownership")]
        CoOwnership,
        [JsonProperty("Association")]
        Association,
        [JsonProperty("Trusteeship")]
        Trusteeship,
        [JsonProperty("General partnership")]
        GeneralPartnership,
        [JsonProperty("Joint venture")]
        JointVenture,
        [JsonProperty("Non-Profit")]
        NonProfit,
    }

    public static class EntityTypeExtension
    {
        public static string Value(this EntityType value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static EntityType ToEnum(this string value)
        {
            foreach(var field in typeof(EntityType).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is EntityType)
                    {
                        return (EntityType)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum EntityType");
        }
    }

}