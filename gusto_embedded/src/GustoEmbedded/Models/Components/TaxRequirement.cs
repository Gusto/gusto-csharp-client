//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace GustoEmbedded.Models.Components
{
    using GustoEmbedded.Models.Components;
    using GustoEmbedded.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    public class TaxRequirement
    {

        /// <summary>
        /// An identifier for an individual requirement. Uniqueness is guaranteed within a requirement set.
        /// </summary>
        [JsonProperty("key")]
        public string? Key { get; set; }

        /// <summary>
        /// An array of references to other requirements within the requirement set. This requirement is only applicable if all referenced requirements have values matching the corresponding `value`. The primary use-case is dynamically hiding and showing requirements as values change. E.g. Show Requirement-B when Requirement-A has been answered with `false`. To be explicit, an empty array means the requirement is applicable.
        /// </summary>
        [JsonProperty("applicable_if")]
        public List<ApplicableIf>? ApplicableIf { get; set; }

        /// <summary>
        /// A customer facing description of the requirement
        /// </summary>
        [JsonProperty("label")]
        public string? Label { get; set; }

        /// <summary>
        /// A more detailed customer facing description of the requirement
        /// </summary>
        [JsonProperty("description")]
        public string? Description { get; set; }

        /// <summary>
        /// The &quot;answer&quot;
        /// </summary>
        [JsonProperty("value")]
        public string? Value { get; set; } = null;

        [JsonProperty("metadata")]
        public TaxRequirementMetadata? Metadata { get; set; }
    }
}