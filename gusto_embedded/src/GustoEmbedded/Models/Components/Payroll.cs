//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace GustoEmbedded.Models.Components
{
    using GustoEmbedded.Models.Components;
    using GustoEmbedded.Utils;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    
    /// <summary>
    /// Example response
    /// </summary>
    public class Payroll
    {

        /// <summary>
        /// A timestamp that is the deadline for the payroll to be run in order for employees to be paid on time.  If payroll has not been run by the deadline, a prepare request will update both the check date and deadline to reflect the soonest employees can be paid and the deadline by which the payroll must be run in order for said check date to be met.
        /// </summary>
        [JsonProperty("payroll_deadline")]
        public DateTime? PayrollDeadline { get; set; }

        /// <summary>
        /// The date on which employees will be paid for the payroll.
        /// </summary>
        [JsonProperty("check_date")]
        public string? CheckDate { get; set; }

        /// <summary>
        /// Whether or not the payroll has been successfully processed. Note that processed payrolls cannot be updated. Additionally, a payroll is not guaranteed to be processed just because the payroll deadline has passed. Late payrolls are not uncommon. Conversely, users may choose to run payroll before the payroll deadline.
        /// </summary>
        [JsonProperty("processed")]
        public bool? Processed { get; set; }

        /// <summary>
        /// The date at which the payroll was processed. Null if the payroll isn&apos;t processed yet.
        /// </summary>
        [JsonProperty("processed_date")]
        public string? ProcessedDate { get; set; }

        /// <summary>
        /// A timestamp of the last valid payroll calculation. Null if there isn&apos;t a valid calculation.
        /// </summary>
        [JsonProperty("calculated_at")]
        public string? CalculatedAt { get; set; }

        /// <summary>
        /// The UUID of the payroll.
        /// </summary>
        [JsonProperty("uuid")]
        public string? Uuid { get; set; }

        /// <summary>
        /// The UUID of the payroll.
        /// </summary>
        [JsonProperty("payroll_uuid")]
        public string? PayrollUuid { get; set; }

        /// <summary>
        /// The UUID of the company for the payroll.
        /// </summary>
        [JsonProperty("company_uuid")]
        public string? CompanyUuid { get; set; }

        /// <summary>
        /// Indicates whether the payroll is an off-cycle payroll
        /// </summary>
        [JsonProperty("off_cycle")]
        public bool? OffCycle { get; set; }

        /// <summary>
        /// The off-cycle reason. Only included for off-cycle payrolls.
        /// </summary>
        [JsonProperty("off_cycle_reason")]
        public OffCycleReasonType? OffCycleReason { get; set; } = null;

        /// <summary>
        /// Indicates whether the payroll is an auto pilot payroll
        /// </summary>
        [JsonProperty("auto_pilot")]
        public bool? AutoPilot { get; set; }

        /// <summary>
        /// Indicates whether the payroll is an external payroll
        /// </summary>
        [JsonProperty("external")]
        public bool? External { get; set; }

        /// <summary>
        /// Indicates whether the payroll is the final payroll for a terminated employee. Only included for off-cycle payrolls.
        /// </summary>
        [JsonProperty("final_termination_payroll")]
        public bool? FinalTerminationPayroll { get; set; }

        /// <summary>
        /// The payment schedule tax rate the payroll is based on. Only included for off-cycle payrolls.
        /// </summary>
        [JsonProperty("withholding_pay_period")]
        public PayrollWithholdingPayPeriodType? WithholdingPayPeriod { get; set; }

        /// <summary>
        /// Block regular deductions and contributions for this payroll.  Only included for off-cycle payrolls.
        /// </summary>
        [JsonProperty("skip_regular_deductions")]
        public bool? SkipRegularDeductions { get; set; }

        /// <summary>
        /// Enable taxes to be withheld at the IRS&apos;s required rate of 22% for federal income taxes. State income taxes will be taxed at the state&apos;s supplemental tax rate. Otherwise, we&apos;ll sum the entirety of the employee&apos;s wages and withhold taxes on the entire amount at the rate for regular wages. Only included for off-cycle payrolls.
        /// </summary>
        [JsonProperty("fixed_withholding_rate")]
        public bool? FixedWithholdingRate { get; set; }

        [JsonProperty("pay_period")]
        public PayrollPayPeriodType? PayPeriod { get; set; }

        /// <summary>
        /// Information about the payroll&apos;s status and expected dates
        /// </summary>
        [JsonProperty("payroll_status_meta")]
        public PayrollPayrollStatusMetaType? PayrollStatusMeta { get; set; }

        /// <summary>
        /// The subtotals for the payroll.
        /// </summary>
        [JsonProperty("totals")]
        public PayrollTotalsType? Totals { get; set; }

        [JsonProperty("employee_compensations")]
        public List<PayrollEmployeeCompensationsType>? EmployeeCompensations { get; set; }

        /// <summary>
        /// An array of taxes applicable to this payroll in addition to taxes included in `employee_compensations`. Only included for processed or calculated payrolls when `taxes` is present in the `include` parameter.
        /// </summary>
        [JsonProperty("company_taxes")]
        public List<PayrollCompanyTaxesType>? CompanyTaxes { get; set; }

        /// <summary>
        /// Only applicable when a payroll is moved to four day processing instead of fast ach.
        /// </summary>
        [JsonProperty("payment_speed_changed")]
        public PayrollPaymentSpeedChangedType? PaymentSpeedChanged { get; set; }

        /// <summary>
        /// Datetime for when the resource was created.
        /// </summary>
        [JsonProperty("created_at")]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Only included for processed or calculated payrolls
        /// </summary>
        [JsonProperty("submission_blockers")]
        public List<PayrollSubmissionBlockersType>? SubmissionBlockers { get; set; }

        /// <summary>
        /// Only included for processed payrolls
        /// </summary>
        [JsonProperty("credit_blockers")]
        public List<PayrollCreditBlockersType>? CreditBlockers { get; set; }

        [JsonProperty("processing_request")]
        public PayrollProcessingRequest? ProcessingRequest { get; set; } = null;
    }
}