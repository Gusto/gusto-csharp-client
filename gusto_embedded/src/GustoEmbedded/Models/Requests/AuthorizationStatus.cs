//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace GustoEmbedded.Models.Requests
{
    using GustoEmbedded.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// The employee&apos;s authorization status<br/>
    /// 
    /// <remarks>
    /// <br/>
    ///   * `citizen`: A citizen is someone who was born in the United States or is a naturalized citizen living in the United States.<br/>
    ///   * `noncitizen`: A noncitizen national is someone born in American Samoa, certain former citizens of the former Trust Territory of the Pacific Islands, and certain children of noncitizen nationals born abroad.<br/>
    ///   * `permanent_resident`: A lawful permanent resident is someone who is not a US citizen and who resides under legally recognized and lawfully recorded permanent residence as an immigrant.<br/>
    ///   * `alien`: Also referred to as a &quot;noncitizen authorized to work&quot;. This includes anyone who is authorized to work in the United States but is not a US citizen, US national or lawful permanent resident.<br/>
    /// 
    /// </remarks>
    /// </summary>
    public enum AuthorizationStatus
    {
        [JsonProperty("citizen")]
        Citizen,
        [JsonProperty("noncitizen")]
        Noncitizen,
        [JsonProperty("permanent_resident")]
        PermanentResident,
        [JsonProperty("alien")]
        Alien,
    }

    public static class AuthorizationStatusExtension
    {
        public static string Value(this AuthorizationStatus value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static AuthorizationStatus ToEnum(this string value)
        {
            foreach(var field in typeof(AuthorizationStatus).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is AuthorizationStatus)
                    {
                        return (AuthorizationStatus)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum AuthorizationStatus");
        }
    }

}