//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace GustoEmbedded.Models.Requests
{
    using GustoEmbedded.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// Explanation for why the company is suspending their account.<br/>
    /// 
    /// <remarks>
    /// <br/>
    /// &gt; ðŸš§ FEIN or entity type changes require Customer Support<br/>
    /// &gt;<br/>
    /// &gt; If a company is switching FEIN or changing their entity type, this change must be performed by Gusto Customer Support and cannot be performed via the API at this time.
    /// </remarks>
    /// </summary>
    public enum Reason
    {
        [JsonProperty("switching_provider")]
        SwitchingProvider,
        [JsonProperty("shutting_down")]
        ShuttingDown,
        [JsonProperty("acquired")]
        Acquired,
        [JsonProperty("no_more_employees")]
        NoMoreEmployees,
        [JsonProperty("changing_ein_or_entity_type")]
        ChangingEinOrEntityType,
    }

    public static class ReasonExtension
    {
        public static string Value(this Reason value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static Reason ToEnum(this string value)
        {
            foreach(var field in typeof(Reason).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is Reason)
                    {
                        return (Reason)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum Reason");
        }
    }

}