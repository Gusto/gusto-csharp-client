//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace GustoEmbedded.Models.Requests
{
    using GustoEmbedded.Models.Requests;
    using GustoEmbedded.Utils;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    

    public class PutV1EmployeeBenefitsEmployeeBenefitIdValueType
    {
        private PutV1EmployeeBenefitsEmployeeBenefitIdValueType(string value) { Value = value; }

        public string Value { get; private set; }
        public static PutV1EmployeeBenefitsEmployeeBenefitIdValueType Str { get { return new PutV1EmployeeBenefitsEmployeeBenefitIdValueType("str"); } }
        
        public static PutV1EmployeeBenefitsEmployeeBenefitIdValueType ArrayOfValue2 { get { return new PutV1EmployeeBenefitsEmployeeBenefitIdValueType("arrayOfValue2"); } }
        
        public static PutV1EmployeeBenefitsEmployeeBenefitIdValueType Null { get { return new PutV1EmployeeBenefitsEmployeeBenefitIdValueType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(PutV1EmployeeBenefitsEmployeeBenefitIdValueType v) { return v.Value; }
        public static PutV1EmployeeBenefitsEmployeeBenefitIdValueType FromString(string v) {
            switch(v) {
                case "str": return Str;
                case "arrayOfValue2": return ArrayOfValue2;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for PutV1EmployeeBenefitsEmployeeBenefitIdValueType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((PutV1EmployeeBenefitsEmployeeBenefitIdValueType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    /// <summary>
    /// For the `amount` and `percentage` contribution types, the value of the corresponding amount or percentage.<br/>
    /// 
    /// <remarks>
    /// <br/>
    /// For the `tiered` contribution type, an array of tiers.
    /// </remarks>
    /// </summary>
    [JsonConverter(typeof(PutV1EmployeeBenefitsEmployeeBenefitIdValue.PutV1EmployeeBenefitsEmployeeBenefitIdValueConverter))]
    public class PutV1EmployeeBenefitsEmployeeBenefitIdValue {
        public PutV1EmployeeBenefitsEmployeeBenefitIdValue(PutV1EmployeeBenefitsEmployeeBenefitIdValueType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public string? Str { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public List<Models.Requests.Value2>? ArrayOfValue2 { get; set; }

        public PutV1EmployeeBenefitsEmployeeBenefitIdValueType Type { get; set; }


        public static PutV1EmployeeBenefitsEmployeeBenefitIdValue CreateStr(string str) {
            PutV1EmployeeBenefitsEmployeeBenefitIdValueType typ = PutV1EmployeeBenefitsEmployeeBenefitIdValueType.Str;

            PutV1EmployeeBenefitsEmployeeBenefitIdValue res = new PutV1EmployeeBenefitsEmployeeBenefitIdValue(typ);
            res.Str = str;
            return res;
        }

        public static PutV1EmployeeBenefitsEmployeeBenefitIdValue CreateArrayOfValue2(List<Models.Requests.Value2> arrayOfValue2) {
            PutV1EmployeeBenefitsEmployeeBenefitIdValueType typ = PutV1EmployeeBenefitsEmployeeBenefitIdValueType.ArrayOfValue2;

            PutV1EmployeeBenefitsEmployeeBenefitIdValue res = new PutV1EmployeeBenefitsEmployeeBenefitIdValue(typ);
            res.ArrayOfValue2 = arrayOfValue2;
            return res;
        }

        public static PutV1EmployeeBenefitsEmployeeBenefitIdValue CreateNull() {
            PutV1EmployeeBenefitsEmployeeBenefitIdValueType typ = PutV1EmployeeBenefitsEmployeeBenefitIdValueType.Null;
            return new PutV1EmployeeBenefitsEmployeeBenefitIdValue(typ);
        }

        public class PutV1EmployeeBenefitsEmployeeBenefitIdValueConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(PutV1EmployeeBenefitsEmployeeBenefitIdValue);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                var json = JRaw.Create(reader).ToString();
                if (json == "null")
                {
                    return null;
                }

                var fallbackCandidates = new List<(System.Type, object, string)>();

                if (json[0] == '"' && json[^1] == '"'){
                    return new PutV1EmployeeBenefitsEmployeeBenefitIdValue(PutV1EmployeeBenefitsEmployeeBenefitIdValueType.Str)
                    {
                        Str = json[1..^1]
                    };
                }

                try
                {
                    return new PutV1EmployeeBenefitsEmployeeBenefitIdValue(PutV1EmployeeBenefitsEmployeeBenefitIdValueType.ArrayOfValue2)
                    {
                        ArrayOfValue2 = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<List<Models.Requests.Value2>>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(List<Models.Requests.Value2>), new PutV1EmployeeBenefitsEmployeeBenefitIdValue(PutV1EmployeeBenefitsEmployeeBenefitIdValueType.ArrayOfValue2), "ArrayOfValue2"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                PutV1EmployeeBenefitsEmployeeBenefitIdValue res = (PutV1EmployeeBenefitsEmployeeBenefitIdValue)value;
                if (PutV1EmployeeBenefitsEmployeeBenefitIdValueType.FromString(res.Type).Equals(PutV1EmployeeBenefitsEmployeeBenefitIdValueType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.Str != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Str));
                    return;
                }
                if (res.ArrayOfValue2 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.ArrayOfValue2));
                    return;
                }

            }

        }

    }
}