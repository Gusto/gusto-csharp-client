//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace GustoEmbedded.Models.Requests
{
    using GustoEmbedded.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// Which competitor the company is joining instead. Required if `reason` is `&apos;switching_provider&apos;`.
    /// </summary>
    public enum LeavingFor
    {
        [JsonProperty("apd")]
        Apd,
        [JsonProperty("adp_total_source")]
        AdpTotalSource,
        [JsonProperty("accountant")]
        Accountant,
        [JsonProperty("bamboo_hr")]
        BambooHr,
        [JsonProperty("bank_or_financial_institution")]
        BankOrFinancialInstitution,
        [JsonProperty("check")]
        Check,
        [JsonProperty("insperity")]
        Insperity,
        [JsonProperty("intuit_or_quickbooks")]
        IntuitOrQuickbooks,
        [JsonProperty("justworks")]
        Justworks,
        [JsonProperty("manual")]
        Manual,
        [JsonProperty("namely")]
        Namely,
        [JsonProperty("onpay")]
        Onpay,
        [JsonProperty("other")]
        Other,
        [JsonProperty("patriot")]
        Patriot,
        [JsonProperty("paycom")]
        Paycom,
        [JsonProperty("paylocity")]
        Paylocity,
        [JsonProperty("rippling")]
        Rippling,
        [JsonProperty("square")]
        Square,
        [JsonProperty("surepayroll")]
        Surepayroll,
        [JsonProperty("trinet")]
        Trinet,
        [JsonProperty("zenefits")]
        Zenefits,
    }

    public static class LeavingForExtension
    {
        public static string Value(this LeavingFor value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static LeavingFor ToEnum(this string value)
        {
            foreach(var field in typeof(LeavingFor).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is LeavingFor)
                    {
                        return (LeavingFor)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum LeavingFor");
        }
    }

}